// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pluke.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlukeClient is the client API for Pluke service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlukeClient interface {
	// Obtains the chunk at given path.
	GetChunk(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (*ChunkResponse, error)
	GetChunkWithCheck(ctx context.Context, in *ChunkRequestWithCheck, opts ...grpc.CallOption) (*ChunkResponse, error)
}

type plukeClient struct {
	cc grpc.ClientConnInterface
}

func NewPlukeClient(cc grpc.ClientConnInterface) PlukeClient {
	return &plukeClient{cc}
}

func (c *plukeClient) GetChunk(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (*ChunkResponse, error) {
	out := new(ChunkResponse)
	err := c.cc.Invoke(ctx, "/grpc.Pluke/GetChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plukeClient) GetChunkWithCheck(ctx context.Context, in *ChunkRequestWithCheck, opts ...grpc.CallOption) (*ChunkResponse, error) {
	out := new(ChunkResponse)
	err := c.cc.Invoke(ctx, "/grpc.Pluke/GetChunkWithCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlukeServer is the server API for Pluke service.
// All implementations must embed UnimplementedPlukeServer
// for forward compatibility
type PlukeServer interface {
	// Obtains the chunk at given path.
	GetChunk(context.Context, *ChunkRequest) (*ChunkResponse, error)
	GetChunkWithCheck(context.Context, *ChunkRequestWithCheck) (*ChunkResponse, error)
	mustEmbedUnimplementedPlukeServer()
}

// UnimplementedPlukeServer must be embedded to have forward compatible implementations.
type UnimplementedPlukeServer struct {
}

func (UnimplementedPlukeServer) GetChunk(context.Context, *ChunkRequest) (*ChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunk not implemented")
}
func (UnimplementedPlukeServer) GetChunkWithCheck(context.Context, *ChunkRequestWithCheck) (*ChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunkWithCheck not implemented")
}
func (UnimplementedPlukeServer) mustEmbedUnimplementedPlukeServer() {}

// UnsafePlukeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlukeServer will
// result in compilation errors.
type UnsafePlukeServer interface {
	mustEmbedUnimplementedPlukeServer()
}

func RegisterPlukeServer(s grpc.ServiceRegistrar, srv PlukeServer) {
	s.RegisterService(&Pluke_ServiceDesc, srv)
}

func _Pluke_GetChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlukeServer).GetChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Pluke/GetChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlukeServer).GetChunk(ctx, req.(*ChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pluke_GetChunkWithCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkRequestWithCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlukeServer).GetChunkWithCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Pluke/GetChunkWithCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlukeServer).GetChunkWithCheck(ctx, req.(*ChunkRequestWithCheck))
	}
	return interceptor(ctx, in, info, handler)
}

// Pluke_ServiceDesc is the grpc.ServiceDesc for Pluke service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pluke_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Pluke",
	HandlerType: (*PlukeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChunk",
			Handler:    _Pluke_GetChunk_Handler,
		},
		{
			MethodName: "GetChunkWithCheck",
			Handler:    _Pluke_GetChunkWithCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pluke.proto",
}
