// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pluke.proto

package grpc

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing chunk request path and auth.
type ChunkRequest struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Version              int32    `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Auth                 *Auth    `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChunkRequest) Reset()         { *m = ChunkRequest{} }
func (m *ChunkRequest) String() string { return proto.CompactTextString(m) }
func (*ChunkRequest) ProtoMessage()    {}
func (*ChunkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d81e7a6d4af175cc, []int{0}
}

func (m *ChunkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChunkRequest.Unmarshal(m, b)
}
func (m *ChunkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChunkRequest.Marshal(b, m, deterministic)
}
func (m *ChunkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkRequest.Merge(m, src)
}
func (m *ChunkRequest) XXX_Size() int {
	return xxx_messageInfo_ChunkRequest.Size(m)
}
func (m *ChunkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkRequest proto.InternalMessageInfo

func (m *ChunkRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ChunkRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ChunkRequest) GetAuth() *Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

// The response message containing the chunk data
type ChunkResponse struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChunkResponse) Reset()         { *m = ChunkResponse{} }
func (m *ChunkResponse) String() string { return proto.CompactTextString(m) }
func (*ChunkResponse) ProtoMessage()    {}
func (*ChunkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d81e7a6d4af175cc, []int{1}
}

func (m *ChunkResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChunkResponse.Unmarshal(m, b)
}
func (m *ChunkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChunkResponse.Marshal(b, m, deterministic)
}
func (m *ChunkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkResponse.Merge(m, src)
}
func (m *ChunkResponse) XXX_Size() int {
	return xxx_messageInfo_ChunkResponse.Size(m)
}
func (m *ChunkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkResponse proto.InternalMessageInfo

func (m *ChunkResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Auth struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Workspace            string   `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Secret               string   `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Auth) Reset()         { *m = Auth{} }
func (m *Auth) String() string { return proto.CompactTextString(m) }
func (*Auth) ProtoMessage()    {}
func (*Auth) Descriptor() ([]byte, []int) {
	return fileDescriptor_d81e7a6d4af175cc, []int{2}
}

func (m *Auth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Auth.Unmarshal(m, b)
}
func (m *Auth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Auth.Marshal(b, m, deterministic)
}
func (m *Auth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auth.Merge(m, src)
}
func (m *Auth) XXX_Size() int {
	return xxx_messageInfo_Auth.Size(m)
}
func (m *Auth) XXX_DiscardUnknown() {
	xxx_messageInfo_Auth.DiscardUnknown(m)
}

var xxx_messageInfo_Auth proto.InternalMessageInfo

func (m *Auth) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Auth) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *Auth) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func init() {
	proto.RegisterType((*ChunkRequest)(nil), "grpc.ChunkRequest")
	proto.RegisterType((*ChunkResponse)(nil), "grpc.ChunkResponse")
	proto.RegisterType((*Auth)(nil), "grpc.Auth")
}

func init() { proto.RegisterFile("pluke.proto", fileDescriptor_d81e7a6d4af175cc) }

var fileDescriptor_d81e7a6d4af175cc = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0x8d, 0x76, 0x57, 0x3b, 0x5d, 0x41, 0x46, 0x91, 0x22, 0x22, 0xb5, 0x5e, 0x7a, 0xca,
	0x61, 0xc5, 0xab, 0xe0, 0x7a, 0xf0, 0x5a, 0xe2, 0xd5, 0x4b, 0x5a, 0x07, 0xbb, 0x64, 0x69, 0x62,
	0xfe, 0xac, 0x5f, 0x5f, 0x92, 0x56, 0xd4, 0xdb, 0xbc, 0x07, 0xf3, 0xe6, 0x37, 0x0f, 0x0a, 0xb3,
	0x0b, 0x8a, 0xb8, 0xb1, 0xda, 0x6b, 0xcc, 0x3e, 0xac, 0xe9, 0xeb, 0x37, 0x58, 0x3d, 0x0f, 0x61,
	0x54, 0x82, 0x3e, 0x03, 0x39, 0x8f, 0x08, 0x99, 0x91, 0x7e, 0x28, 0x59, 0xc5, 0x9a, 0x5c, 0xa4,
	0x19, 0x4b, 0x38, 0xde, 0x93, 0x75, 0x5b, 0x3d, 0x96, 0x87, 0x15, 0x6b, 0x16, 0xe2, 0x47, 0xe2,
	0x0d, 0x64, 0x32, 0xf8, 0xa1, 0x3c, 0xaa, 0x58, 0x53, 0xac, 0x81, 0xc7, 0x48, 0xfe, 0x14, 0xfc,
	0x20, 0x92, 0x5f, 0xdf, 0xc1, 0xe9, 0x9c, 0xee, 0x8c, 0x1e, 0x1d, 0xc5, 0xf8, 0x77, 0xe9, 0x65,
	0x8a, 0x5f, 0x89, 0x34, 0xd7, 0x02, 0xb2, 0xb8, 0x82, 0x17, 0xb0, 0xf0, 0x5a, 0xd1, 0x38, 0xdf,
	0x9e, 0x04, 0x5e, 0x43, 0xfe, 0xa5, 0xad, 0x72, 0x46, 0xf6, 0x94, 0xce, 0xe7, 0xe2, 0xd7, 0xc0,
	0x4b, 0x58, 0x3a, 0xea, 0x2d, 0xf9, 0x84, 0x90, 0x8b, 0x59, 0xad, 0x1f, 0x61, 0xd1, 0xc6, 0x5f,
	0xf1, 0x01, 0x4e, 0x5e, 0xc8, 0x27, 0x08, 0xc4, 0x89, 0xef, 0xef, 0xbf, 0x57, 0xe7, 0xff, 0xbc,
	0x89, 0xb2, 0x3e, 0xd8, 0xdc, 0xc2, 0xd9, 0x56, 0x73, 0x15, 0x3a, 0xb2, 0x3b, 0xd9, 0xf1, 0xd8,
	0xdb, 0xa6, 0x78, 0x25, 0xbb, 0x27, 0xdb, 0xc6, 0xf6, 0x5a, 0xd6, 0x2d, 0x53, 0x8d, 0xf7, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x04, 0xf3, 0x89, 0x77, 0x55, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlukeClient is the client API for Pluke service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlukeClient interface {
	// Obtains the chunk at given path.
	GetChunk(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (*ChunkResponse, error)
}

type plukeClient struct {
	cc *grpc.ClientConn
}

func NewPlukeClient(cc *grpc.ClientConn) PlukeClient {
	return &plukeClient{cc}
}

func (c *plukeClient) GetChunk(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (*ChunkResponse, error) {
	out := new(ChunkResponse)
	err := c.cc.Invoke(ctx, "/grpc.Pluke/GetChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlukeServer is the server API for Pluke service.
type PlukeServer interface {
	// Obtains the chunk at given path.
	GetChunk(context.Context, *ChunkRequest) (*ChunkResponse, error)
}

func RegisterPlukeServer(s *grpc.Server, srv PlukeServer) {
	s.RegisterService(&_Pluke_serviceDesc, srv)
}

func _Pluke_GetChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlukeServer).GetChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Pluke/GetChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlukeServer).GetChunk(ctx, req.(*ChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pluke_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Pluke",
	HandlerType: (*PlukeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChunk",
			Handler:    _Pluke_GetChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pluke.proto",
}
